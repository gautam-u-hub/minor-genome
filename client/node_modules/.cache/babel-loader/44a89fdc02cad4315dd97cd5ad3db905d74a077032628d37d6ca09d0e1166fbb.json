{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pkg13\\\\Downloads\\\\Dgdrive3.0-main\\\\Dgdrive3.0-main\\\\client\\\\src\\\\components\\\\FileUpload.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./FileUpload.css\";\nimport FormData from 'form-data';\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = _ref => {\n  _s();\n  let {\n    contract,\n    account,\n    provider\n  } = _ref;\n  const [file, setFile] = useState(null);\n  const [fileName, setFileName] = useState(\"No image selected\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (file) {\n      // try {\n      //   const formData = new FormData();\n      //   formData.append(\"file\", file);\n\n      //   const resFile = await axios({\n      //     method: \"post\",\n      //     url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      //     data: formData,\n      //     headers: {\n      //       pinata_api_key: `c7ebbf2b10f77afbe2c3`,\n      //       pinata_secret_api_key: `03a33ec76a37f6c618e37dfed6055e936581cf9c619b6d57e7877ebe349e1bde`,\n      //       \"Content-Type\": \"multipart/form-data\",\n      //       path:\"somename\",\n\n      //     },\n      //   });\n      //   const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\n      //   //const signer = contract.connect(provider.getSigner());\n      //   const signer = contract.connect(provider.getSigner());\n      //   signer.add(account, ImgHash);\n      //   alert(\"Successfully Image Uploaded\");\n      // } catch (e) {\n      //   console.log(e);\n      // }\n\n      const JWT = 'Bearer PASTE_YOUR_PINATA_JWT';\n      const pinFileToIPFS = async () => {\n        const formData = new FormData();\n        const src = file;\n        const file = fs.createReadStream(src);\n        formData.append('file', file);\n        const metadata = JSON.stringify({\n          name: 'File name'\n        });\n        formData.append('pinataMetadata', metadata);\n        const options = JSON.stringify({\n          cidVersion: 0\n        });\n        formData.append('pinataOptions', options);\n        try {\n          const res = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\n            maxBodyLength: \"Infinity\",\n            headers: {\n              'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\n              Authorization: JWT\n            }\n          });\n          console.log(res.data);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n    }\n    setFileName(\"No image selected\");\n    setFile(null);\n  };\n  const retrieveFile = e => {\n    const data = e.target.files[0]; //files array of files object\n    // console.log(data);\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n    reader.onloadend = () => {\n      setFile(e.target.files[0]);\n    };\n    setFileName(e.target.files[0].name);\n    e.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: \"choose\",\n        children: \"Choose Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        disabled: !account,\n        type: \"file\",\n        id: \"file-upload\",\n        name: \"data\",\n        onChange: retrieveFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"textArea\",\n        children: [\"Image: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload\",\n        disabled: !file,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"iogOrXrY+NbnG1T+Sl+25rviPM0=\");\n_c = FileUpload;\nexport default FileUpload;\n\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./FileUpload.css\";\n// function FileUpload({ contract, provider, account }) {\n//   // const [urlArr, setUrlArr] = useState([]);\n//   const [file, setFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"No image selected\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (file) {\n//         try {\n//           const formData = new FormData();\n//           formData.append(\"file\", file);\n\n//           const resFile = await axios({\n//             method: \"post\",\n//             url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n//             data: formData,\n//             headers: {\n//               pinata_api_key: `95f328a012f1634eab8b`,\n//               pinata_secret_api_key: `8ea64e6b39c91631c66128a7c0e0dde35a6fbdf797a8393cc5ba8bf8d58e9b54`,\n//               \"Content-Type\": \"multipart/form-data\",\n//             },\n//           });\n\n//           const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\n//           const signer = contract.connect(provider.getSigner());\n//           signer.add(account, ImgHash);\n\n//           //setUrlArr((prev) => [...prev, ImgHash]);\n\n//           //Take a look at your Pinata Pinned section, you will see a new file added to you list.\n//         } catch (error) {\n//           alert(\"Error sending File to IPFS\");\n//           console.log(error);\n//         }\n//       }\n\n//       alert(\"Successfully Uploaded\");\n//       setFileName(\"No image selected\");\n//       setFile(null); //to again disable the upload button after upload\n//     } catch (error) {\n//       console.log(error.message); //this mostly occurse when net is not working\n//     }\n//   };\n//   const retrieveFile = (e) => {\n//     const data = e.target.files[0];\n//     console.log(data);\n\n//     const reader = new window.FileReader();\n\n//     reader.readAsArrayBuffer(data);\n//     reader.onloadend = () => {\n//       setFile(e.target.files[0]);\n//     };\n//     setFileName(e.target.files[0].name);\n//     e.preventDefault();\n//   };\n//   return (\n//     <div className=\"top\">\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <label htmlFor=\"file-upload\" className=\"choose\">\n//           {/*turn around for avoding choose file */}\n//           Choose Image\n//         </label>\n//         <input\n//           disabled={!account} //disabling button when metamask account is not connected\n//           type=\"file\"\n//           id=\"file-upload\"\n//           name=\"data\"\n//           onChange={retrieveFile}\n//         />\n//         <span className=\"textArea\">Image: {fileName}</span>\n//         {/* choose file */}\n//         <button type=\"submit\" disabled={!file} className=\"upload\">\n//           Upload file\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["useState","axios","FormData","fs","FileUpload","contract","account","provider","file","setFile","fileName","setFileName","handleSubmit","e","preventDefault","JWT","pinFileToIPFS","formData","src","createReadStream","append","metadata","JSON","stringify","name","options","cidVersion","res","post","maxBodyLength","headers","_boundary","Authorization","console","log","data","error","retrieveFile","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend"],"sources":["C:/Users/pkg13/Downloads/Dgdrive3.0-main/Dgdrive3.0-main/client/src/components/FileUpload.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./FileUpload.css\";\r\nimport FormData from 'form-data'\r\nimport fs from 'fs'\r\nconst FileUpload = ({ contract, account, provider }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [fileName, setFileName] = useState(\"No image selected\");\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (file) {\r\n      // try {\r\n      //   const formData = new FormData();\r\n      //   formData.append(\"file\", file);\r\n\r\n      //   const resFile = await axios({\r\n      //     method: \"post\",\r\n      //     url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n      //     data: formData,\r\n      //     headers: {\r\n      //       pinata_api_key: `c7ebbf2b10f77afbe2c3`,\r\n      //       pinata_secret_api_key: `03a33ec76a37f6c618e37dfed6055e936581cf9c619b6d57e7877ebe349e1bde`,\r\n      //       \"Content-Type\": \"multipart/form-data\",\r\n      //       path:\"somename\",\r\n            \r\n      //     },\r\n      //   });\r\n      //   const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\r\n      //   //const signer = contract.connect(provider.getSigner());\r\n      //   const signer = contract.connect(provider.getSigner());\r\n      //   signer.add(account, ImgHash);\r\n      //   alert(\"Successfully Image Uploaded\");\r\n      // } catch (e) {\r\n      //   console.log(e);\r\n      // }\r\n\r\nconst JWT = 'Bearer PASTE_YOUR_PINATA_JWT'\r\n\r\nconst pinFileToIPFS = async () => {\r\n    const formData = new FormData();\r\n    const src = file;\r\n    \r\n    const file = fs.createReadStream(src)\r\n    formData.append('file', file)\r\n    \r\n    const metadata = JSON.stringify({\r\n      name: 'File name',\r\n    });\r\n    formData.append('pinataMetadata', metadata);\r\n    \r\n    const options = JSON.stringify({\r\n      cidVersion: 0,\r\n    })\r\n    formData.append('pinataOptions', options);\r\n\r\n    try{\r\n      const res = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", formData, {\r\n        maxBodyLength: \"Infinity\",\r\n        headers: {\r\n          'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\r\n          Authorization: JWT\r\n        }\r\n      });\r\n      console.log(res.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n}\r\n\r\n    }\r\n    \r\n    setFileName(\"No image selected\");\r\n    setFile(null);\r\n  };\r\n  const retrieveFile = (e) => {\r\n    const data = e.target.files[0]; //files array of files object\r\n    // console.log(data);\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(data);\r\n    reader.onloadend = () => {\r\n      setFile(e.target.files[0]);\r\n    };\r\n    setFileName(e.target.files[0].name);\r\n    e.preventDefault();\r\n  };\r\n  return (\r\n    <div className=\"top\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"file-upload\" className=\"choose\">\r\n          Choose Image\r\n        </label>\r\n        <input\r\n          disabled={!account}\r\n          type=\"file\"\r\n          id=\"file-upload\"\r\n          name=\"data\"\r\n          onChange={retrieveFile}\r\n        />\r\n        <span className=\"textArea\">Image: {fileName}</span>\r\n        <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n          Upload File\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default FileUpload;\r\n\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./FileUpload.css\";\r\n// function FileUpload({ contract, provider, account }) {\r\n//   // const [urlArr, setUrlArr] = useState([]);\r\n//   const [file, setFile] = useState(null);\r\n//   const [fileName, setFileName] = useState(\"No image selected\");\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       if (file) {\r\n//         try {\r\n//           const formData = new FormData();\r\n//           formData.append(\"file\", file);\r\n\r\n//           const resFile = await axios({\r\n//             method: \"post\",\r\n//             url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n//             data: formData,\r\n//             headers: {\r\n//               pinata_api_key: `95f328a012f1634eab8b`,\r\n//               pinata_secret_api_key: `8ea64e6b39c91631c66128a7c0e0dde35a6fbdf797a8393cc5ba8bf8d58e9b54`,\r\n//               \"Content-Type\": \"multipart/form-data\",\r\n//             },\r\n//           });\r\n\r\n//           const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\r\n//           const signer = contract.connect(provider.getSigner());\r\n//           signer.add(account, ImgHash);\r\n\r\n//           //setUrlArr((prev) => [...prev, ImgHash]);\r\n\r\n//           //Take a look at your Pinata Pinned section, you will see a new file added to you list.\r\n//         } catch (error) {\r\n//           alert(\"Error sending File to IPFS\");\r\n//           console.log(error);\r\n//         }\r\n//       }\r\n\r\n//       alert(\"Successfully Uploaded\");\r\n//       setFileName(\"No image selected\");\r\n//       setFile(null); //to again disable the upload button after upload\r\n//     } catch (error) {\r\n//       console.log(error.message); //this mostly occurse when net is not working\r\n//     }\r\n//   };\r\n//   const retrieveFile = (e) => {\r\n//     const data = e.target.files[0];\r\n//     console.log(data);\r\n\r\n//     const reader = new window.FileReader();\r\n\r\n//     reader.readAsArrayBuffer(data);\r\n//     reader.onloadend = () => {\r\n//       setFile(e.target.files[0]);\r\n//     };\r\n//     setFileName(e.target.files[0].name);\r\n//     e.preventDefault();\r\n//   };\r\n//   return (\r\n//     <div className=\"top\">\r\n//       <form className=\"form\" onSubmit={handleSubmit}>\r\n//         <label htmlFor=\"file-upload\" className=\"choose\">\r\n//           {/*turn around for avoding choose file */}\r\n//           Choose Image\r\n//         </label>\r\n//         <input\r\n//           disabled={!account} //disabling button when metamask account is not connected\r\n//           type=\"file\"\r\n//           id=\"file-upload\"\r\n//           name=\"data\"\r\n//           onChange={retrieveFile}\r\n//         />\r\n//         <span className=\"textArea\">Image: {fileName}</span>\r\n//         {/* choose file */}\r\n//         <button type=\"submit\" disabled={!file} className=\"upload\">\r\n//           Upload file\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default FileUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}